一：如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python还允许用r''表示''内部的字符串默认不转义，可以自己试试：
二：如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用'''...'''的格式表示多行内容，可以自己试试：
    >>> print('''line1
    ... line2
    ... line3''')
    line1
    line2
    line3
三：空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。    
四：所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：
    PI = 3.14159265359
    但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量PI的值，也没人能拦住你。
五：在Python中，有两种除法，一种除法是/：
    >>> 10 / 3
    3.3333333333333335
    /除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：
    >>> 9 / 3
    3.0
    还有一种除法是//，称为地板除，两个整数的除法仍然是整数：
    >>> 10 // 3
    3
六：在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：
    >>> print('包含中文的str')
    包含中文的str
    对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：
    >>> ord('A')
    65
    >>> ord('中')
    20013
    >>> chr(66)
    'B'
    >>> chr(25991)
    '文'
七：由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。
    Python对bytes类型的数据用带b前缀的单引号或双引号表示：
    x = b'ABC'
    要注意区分'ABC'和b'ABC'，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节。
八：len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：
    >>> len(b'ABC')
    3
    >>> len(b'\xe4\xb8\xad\xe6\x96\x87')
    6
    >>> len('中文'.encode('utf-8'))
    6
九：由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-
    第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
    第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。
十：有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
    >>> 'growth rate: %d %%' % 7
    'growth rate: 7 %'
11：list：如果要取最后一个元素，除了计算索引位置外，还可以用-1做索引，直接获取最后一个元素：
    >>> classmates[-1]
    'Tracy'
    以此类推，可以获取倒数第2个、倒数第3个：
    >>> classmates[-2]
    'Bob'
    >>> classmates[-3]
    'Michael'
12：list元素也可以是另一个list，比如：
    >>> s = ['python', 'java', ['asp', 'php'], 'scheme']
    >>> len(s)
    4
13：只有1个元素的tuple定义时必须加一个逗号,，来消除歧义：
    >>> t = (1,)
    >>> t
    (1,)
14：更改元组
    元组是不可变的，也就是说，元组中的元素在被赋值后不能改变。
    但是，如果元素本身是一个可变数据类型的列表，那么其嵌套项可以被改变。
    >>> tup = (6, 'Python', ['P', 'y', 't', 'h', 'o', 'n'])
    >>> 
    >>> tup[0] = 8  # 不能改变元素
    ...
    TypeError: 'tuple' object does not support item assignment
    >>> 
    >>> tup[2][3] = 's'  # 可变的元素可以被改变
    >>> tup
    (6, 'Python', ['P', 'y', 't', 's', 'o', 'n'])

    删除元组
    如上所述，不能更改元组中的元素，这也意味着无法删除元组中的元素。    
    但是，使用关键字 del 可以删除整个元组。   
    >>> tup = ('P', 'y', 't', 'h', 'o', 'n')
    >>> 
    >>> del tup[2]  # 无法删除元素
    ...
    TypeError: 'tuple' object doesn't support item deletion
    >>> 
    >>> del tup  # 可以删除整个元组
    >>> tup
    ...
    NameError: name 'tup' is not defined

    列表和元组互转
    列表和元组之间可以进行相互转换，分别使用 list() 和 tuple() 实现：
    >>> tup = ('P', 'y', 't', 'h', 'o', 'n')
    >>> listx = list(tup)
    >>> listx
    ['P', 'y', 't', 'h', 'o', 'n']
    >>> 
    >>> l = ['H', 'e', 'l', 'l', 'o']
    >>> tupx = tuple(l)
    >>> tupx
    ('H', 'e', 'l', 'l', 'o')
    既然可以互转，那么要改变元组，可以先将其转化为列表，对列表进行更改，然后再将列表转换为元组。
    例如，删除元组中的元素：
    >>> tup = ('P', 'y', 't', 'h', 'o', 'n')
    >>> listx = list(tup)  # 将元组转换为列表
    >>> listx.remove('h')  # 删除列表中的元素
    >>> tup = tuple(listx)  # 再将列表转换为元组
    >>> tup
    ('P', 'y', 't', 'o', 'n')
    注意： 元组本身是不可变的。这里说的并不是传统意义的改变，相当于元组的重新赋值。
15：再议 input
    最后看一个有问题的条件判断。很多同学会用input()读取用户的输入，这样可以自己输入，程序运行得更有意思：
    birth = input('birth: ')
    if birth < 2000:
         print('00前')
    else:
         print('00后')
    输入1982，结果报错：
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    TypeError: unorderable types: str() > int()
    这是因为input()返回的数据类型是str，str不能直接和整数比较，必须先把str转换成整数。Python提供了int()函数来完成这件事情：
    s = input('birth: ')
    birth = int(s)
    if birth < 2000:
        print('00前')
    else:
        print('00后')
    再次运行，就可以得到正确地结果。但是，如果输入abc呢？又会得到一个错误信息：
    Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
    ValueError: invalid literal for int() with base 10: 'abc'
    原来int()函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。
16：如果要计算1-100的整数之和，从1写到100有点困难，幸好Python提供一个range()函数，可以生成一个整数序列，再通过list()函数可以转换为list。比如range(5)生成的序列是从0开始小于5的整数：
    >>> list(range(5))
    [0, 1, 2, 3, 4]
    range(101)就可以生成0-100的整数序列
